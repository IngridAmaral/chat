{"version":3,"sources":["utils/convertTimestamp.js","components/messages/message/Message.jsx","components/messages/Messages.jsx","components/form/input-message/InputMessage.jsx","components/form/send-button/SendButton.jsx","components/form/Form.jsx","api.js","components/Chat.jsx","App.jsx","index.jsx"],"names":["convertTimestamp","timestamp","Date","toUTCString","substring","Message","isUser","messageData","author","message","className","he","decode","defaultProps","Messages","scrollToBottom","messagesEnd","scrollIntoView","behavior","this","prevProps","props","messages","length","activeUser","ref","mesRef","onScroll","handleScroll","splice","map","id","style","float","clear","el","React","Component","InputMessage","handleInput","newMessage","maxRows","minRows","onChange","placeholder","value","SendButton","sendMessage","type","onClick","Form","API_KEY","process","ROOT_URL","api","instance","axios","create","baseURL","interceptors","request","use","config","params","header","token","makeAxiosInstance","fetchMessages","a","get","then","resp","data","catch","response","ACTIVE_USER","FULLFILED","Chat","componentDidMount","receiveMesssages","setState","loading","handleNewMessage","e","target","messageObj","state","preventDefault","post","addNewMessage","date","getTime","prevState","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f64a864a.chunk.js","sourcesContent":["const convertTimestamp = (timestamp) => {\r\n  const date = new Date(timestamp);\r\n  return date.toUTCString().substring(4, 22);\r\n};\r\n\r\nexport default convertTimestamp;\r\n","import React from 'react';\r\nimport he from 'he';\r\nimport PropTypes from 'prop-types';\r\nimport convertTimestamp from '../../../utils/convertTimestamp';\r\nimport './Message.scss';\r\n\r\nconst Message = ({ isUser, messageData: { author, timestamp, message } }) => (\r\n  <div className={`message ${isUser ? 'user-message' : 'received-message'}`}>\r\n    {!isUser && <span className=\"message-author\">{author}</span>}\r\n    <span className=\"message-text\">{he.decode(message)}</span>\r\n    <span className=\"message-timestamp\">{convertTimestamp(timestamp)}</span>\r\n  </div>\r\n);\r\n\r\nMessage.propTypes = {\r\n  isUser: PropTypes.bool,\r\n  messageData: PropTypes.shape({\r\n    _id: PropTypes.string,\r\n    message: PropTypes.string,\r\n    author: PropTypes.string,\r\n    timestamp: PropTypes.number,\r\n    token: PropTypes.string\r\n  }).isRequired\r\n};\r\n\r\nMessage.defaultProps = {\r\n  isUser: false\r\n};\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Message from './message/Message';\r\nimport './Messages.scss';\r\n\r\nclass Messages extends React.Component {\r\n  componentDidMount() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { messages } = this.props;\r\n    const hasNewMessage = messages.length !== prevProps.messages.length;\r\n\r\n    if (hasNewMessage) {\r\n      this.scrollToBottom();\r\n    }\r\n  }\r\n\r\n  scrollToBottom = () => {\r\n    this.messagesEnd.scrollIntoView({ behavior: 'instant' });\r\n  };\r\n\r\n  render() {\r\n    const { activeUser, messages } = this.props;\r\n\r\n    return (\r\n      <div ref={this.mesRef} className=\"messages\" onScroll={this.handleScroll}>\r\n        {messages.splice(46).map((messageData) => (\r\n          <Message\r\n            isUser={messageData.author === activeUser}\r\n            messageData={messageData}\r\n            key={messageData.timestamp}\r\n          />\r\n        ))}\r\n        <div\r\n          id=\"bottom\"\r\n          style={{ float: 'left', clear: 'both' }}\r\n          ref={(el) => {\r\n            this.messagesEnd = el;\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMessages.propTypes = {\r\n  activeUser: PropTypes.string.isRequired,\r\n  messages: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      _id: PropTypes.string,\r\n      message: PropTypes.string,\r\n      author: PropTypes.string,\r\n      timestamp: PropTypes.number,\r\n      token: PropTypes.string,\r\n      length: PropTypes.number\r\n    })\r\n  ).isRequired\r\n};\r\n\r\nexport default Messages;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport './InputMessage.scss';\r\n\r\nconst InputMessage = ({ handleInput, newMessage }) => (\r\n  <TextareaAutosize\r\n    maxRows={3}\r\n    minRows={1}\r\n    className=\"input-message\"\r\n    onChange={handleInput}\r\n    placeholder=\"Type your message\"\r\n    value={newMessage}\r\n  />\r\n);\r\n\r\nInputMessage.propTypes = {\r\n  handleInput: PropTypes.func.isRequired,\r\n  newMessage: PropTypes.string.isRequired\r\n};\r\n\r\nexport default InputMessage;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './SendButton.scss';\r\n\r\nconst SendButton = ({ sendMessage }) => (\r\n  <button type=\"submit\" className=\"send-button\" onClick={sendMessage}>\r\n    Send\r\n  </button>\r\n);\r\n\r\nSendButton.propTypes = {\r\n  sendMessage: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SendButton;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport InputMessage from './input-message/InputMessage';\r\nimport SendButton from './send-button/SendButton';\r\nimport './Form.scss';\r\n\r\nconst Form = ({ handleInput, sendMessage, newMessage }) => (\r\n  <div className=\"form\">\r\n    <InputMessage handleInput={handleInput} newMessage={newMessage} />\r\n    <SendButton sendMessage={sendMessage} />\r\n  </div>\r\n);\r\n\r\nForm.propTypes = {\r\n  handleInput: PropTypes.func.isRequired,\r\n  sendMessage: PropTypes.func.isRequired,\r\n  newMessage: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Form;\r\n","import axios from 'axios';\r\n\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\nconst ROOT_URL = 'https://chatty.kubernetes.doodle-test.com/api/chatty/v1.0/';\r\n\r\nconst makeAxiosInstance = () => {\r\n  const instance = axios.create({ baseURL: ROOT_URL });\r\n\r\n  instance.interceptors.request.use((config) => ({\r\n    ...config,\r\n    params: {\r\n      header: {\r\n        token: API_KEY\r\n      },\r\n      ...config.params\r\n    }\r\n  }));\r\n\r\n  return instance;\r\n};\r\n\r\nexport const api = makeAxiosInstance();\r\n\r\nexport const fetchMessages = async () => {\r\n  const response = await api\r\n    .get(`?token=${API_KEY}`)\r\n    .then((resp) => resp.data)\r\n    .catch(() => `Error`);\r\n\r\n  return response;\r\n};\r\n\r\nexport const fetchNMessagesSinceTimestamp = async (\r\n  numberOfMessages,\r\n  timestamp\r\n) => {\r\n  const response = await api\r\n    .get(`?since=${timestamp}&limit=${numberOfMessages}&token=${API_KEY}`)\r\n    .then((resp) => resp.data)\r\n    .catch(() => `Error`);\r\n\r\n  return response;\r\n};\r\n\r\nexport const sendMessage = (messageObj) => {\r\n  axios.post(`${ROOT_URL}?token=${API_KEY}`, messageObj);\r\n};\r\n","import React from 'react';\r\nimport Messages from './messages/Messages';\r\nimport Form from './form/Form';\r\nimport { sendMessage, fetchMessages } from '../api';\r\nimport './Chat.scss';\r\n\r\nconst ACTIVE_USER = 'Jessica';\r\nexport const PENDING = 'PENDING';\r\nexport const FULLFILED = 'FULLFILED';\r\nexport const REJECTED = 'REJECTED';\r\n\r\nclass Chat extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      messages: [],\r\n      loading: PENDING,\r\n      newMessage: '',\r\n      activeUser: ACTIVE_USER\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.receiveMesssages();\r\n  };\r\n\r\n  receiveMesssages = async () => {\r\n    try {\r\n      const messages = await fetchMessages();\r\n\r\n      this.setState({ messages, loading: FULLFILED });\r\n    } catch (error) {\r\n      this.setState({ loading: REJECTED });\r\n    }\r\n  };\r\n\r\n  handleNewMessage = (e) => {\r\n    const { value } = e.target;\r\n    this.setState({ newMessage: value });\r\n  };\r\n\r\n  sendMessage = (e) => {\r\n    const { newMessage, activeUser } = this.state;\r\n    e.preventDefault();\r\n\r\n    if (newMessage) {\r\n      sendMessage({ message: newMessage, author: activeUser });\r\n      this.addNewMessage();\r\n    }\r\n  };\r\n\r\n  addNewMessage = () => {\r\n    const { newMessage, activeUser } = this.state;\r\n    const date = new Date().getTime();\r\n\r\n    this.setState((prevState) => ({\r\n      messages: [\r\n        ...prevState.messages,\r\n        {\r\n          message: newMessage,\r\n          id: newMessage,\r\n          timestamp: date,\r\n          author: activeUser\r\n        }\r\n      ],\r\n      newMessage: ''\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { messages, loading, newMessage } = this.state;\r\n\r\n    return (\r\n      <div className=\"chat\">\r\n        {loading === FULLFILED && (\r\n          <Messages\r\n            newMessage={newMessage}\r\n            activeUser={ACTIVE_USER}\r\n            messages={messages}\r\n          />\r\n        )}\r\n        <Form\r\n          handleInput={this.handleNewMessage}\r\n          sendMessage={this.sendMessage}\r\n          newMessage={newMessage}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chat;\r\n","import React from 'react';\r\nimport Chat from './components/Chat';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Chat />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}